{"version":3,"sources":["Home.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loading","state","pourcentage","setState","end","_this2","interval","setInterval","clearInterval","react_default","a","createElement","className","src","logo","alt","style","width","height","role","aria-valuenow","aria-valuemin","aria-valuemax","Component","App","src_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"+PA6CeA,cAxCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGRQ,QAAU,WACLP,EAAKQ,MAAMC,YAAY,IACxBT,EAAKU,SAAS,SAAAF,GAAK,MAAK,CACtBC,YAAaD,EAAMC,YAAc,MAGnCT,EAAKU,SAAS,SAAAF,GAAK,MAAK,CACtBG,KAAK,MATTX,EAAKQ,MAAQ,CAAEC,YAAa,EAAEE,KAAK,GAFlBX,mFAcC,IAAAY,EAAAT,KAChBA,KAAKU,SAAWC,YAAY,kBAAMF,EAAKL,WAAW,oDAIpDQ,cAAcZ,KAAKU,2CAInB,OACIG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,oBACUF,EAAAC,EAAAC,cAAA,sBADV,iBAGAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWI,MAAO,CAACC,MAAO,MAAMC,OAAQ,SACrDT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8DAA8DO,KAAK,cAAcH,MAAO,CAACC,MAAOrB,KAAKK,MAAMC,YAAc,IAAIgB,OAAQ,QAASE,gBAAexB,KAAKK,MAAMC,YAAamB,gBAAc,IAAIC,gBAAc,OAAO1B,KAAKK,MAAMC,YAAc,MAGnQN,KAAKK,MAAMG,IAAMK,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gEAAlB,SAAgG,aAlC3GW,aCWJC,mLARX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACc,EAAD,cALUF,aCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,sDE3HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.8adc6216.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { pourcentage: 0,end: false };\r\n  }\r\n  loading = ()=>{\r\n    if(this.state.pourcentage<100)\r\n      this.setState(state => ({\r\n        pourcentage: state.pourcentage + 10\r\n      }));\r\n    else\r\n      this.setState(state => ({\r\n        end: true\r\n      }));\r\n  }\r\n  componentDidMount() {  \r\n      this.interval = setInterval(() => this.loading(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Loading <code>GameJs</code> Plz wait ...\r\n          </p>\r\n          <div className=\"progress\" style={{width: \"25%\",height: \"30px\"}}>\r\n            <div className=\"progress-bar progress-bar-striped bg-theme font-weight-bold\" role=\"progressbar\" style={{width: this.state.pourcentage + \"%\",height: \"30px\"}} aria-valuenow={this.state.pourcentage} aria-valuemin=\"0\" aria-valuemax=\"100\">{this.state.pourcentage + \"%\"}</div>\r\n          </div>\r\n          {\r\n            (this.state.end)? <button className=\"btn btn-info btn-big bg-theme mt-2 col-md-2 font-weight-bold\">Start</button>:null\r\n          }\r\n        </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}